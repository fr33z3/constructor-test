// Generated by CoffeeScript 1.8.0
(function() {
  var BANNER_IMG_STYLE, BannerPlacement, ConstructorPanel, PANEL_BACKGROUND_STYLE, PANEL_STYLE, checkForInterest, childArray, generatePlacements;

  Array.prototype["delete"] = function(element) {
    var id;
    id = this.indexOf(element);
    if (id === -1) {
      return this;
    } else {
      return this.slice(0, id).concat(this.slice(id + 1));
    }
  };

  PANEL_BACKGROUND_STYLE = {
    left: 0,
    top: 0,
    position: 'absolute',
    width: '100%',
    height: '100%',
    opacity: 0.7,
    transition: 'left 0.8s',
    "background-color": "black"
  };

  PANEL_STYLE = {
    left: 0,
    top: 0,
    position: 'absolute',
    transition: 'left 0.8s',
    width: '100%',
    heigth: '100%'
  };

  BANNER_IMG_STYLE = {
    margin: '10px'
  };

  ConstructorPanel = (function() {
    function ConstructorPanel() {
      this.banners = [];
      this.background = $dom.create("div#constructor-panel-background");
      this.panel = $dom.create("div#constructor-panel");
      $dom.style(this.background, PANEL_BACKGROUND_STYLE);
      $dom.style(this.panel, PANEL_STYLE);
    }

    ConstructorPanel.prototype.addBanner = function(banner) {
      this.banners.push(banner);
      return this.panel.appendChild(banner.previewImage);
    };

    ConstructorPanel.prototype.removeBanner = function(banner) {
      return this.banners.push(banner);
    };

    ConstructorPanel.prototype.width = function() {
      return this.background.clientWidth;
    };

    ConstructorPanel.prototype.show = function() {
      $dom.style(this.background, {
        left: "0px"
      });
      return $dom.style(this.panel, {
        left: "0px"
      });
    };

    ConstructorPanel.prototype.hide = function() {
      $dom.style(this.background, {
        left: "" + (-this.width()) + "px"
      });
      return $dom.style(this.panel, {
        left: "" + (-this.width()) + "px"
      });
    };

    ConstructorPanel.prototype.attachTo = function(element) {
      element.appendChild(this.background);
      return element.appendChild(this.panel);
    };

    return ConstructorPanel;

  })();

  this.Banner = (function() {
    function Banner(uri) {
      this.uri = uri;
      this.previewImage = $dom.create('img.banner');
      $dom.style(this.previewImage, BANNER_IMG_STYLE);
      this.previewImage.onload = this.normalizePreview.bind(this);
      this.previewImage.src = this.uri;
      this.previewImage.draggable = true;
      this._image = $dom.create('img.banner');
      this._image.src = this.uri;
      this.previewImage.addEventListener('dragstart', this.previewElementDragStart.bind(this), false);
      this._image.addEventListener('dragstart', this.previewElementDragStart.bind(this), false);
    }

    Banner.prototype.previewWidth = function() {
      return this.previewImage.naturalWidth;
    };

    Banner.prototype.previewHeight = function() {
      return this.previewImage.naturalHeight;
    };

    Banner.prototype.normalizePreview = function() {
      if (this.previewWidth() > 400) {
        return this.previewImage.width = 400;
      } else if (this.previewHeight() > 100) {
        return this.previewImage.height = 100;
      }
    };

    Banner.prototype.previewElementDragStart = function(event) {
      window.draggingElement = this;
      return setTimeout(function() {
        return constructorPanel.hide();
      }, 1);
    };

    Banner.prototype.image = function() {
      return this._image;
    };

    return Banner;

  })();

  this.bannerPlacements = [];

  BannerPlacement = (function() {
    function BannerPlacement(docElement, type) {
      this.docElement = docElement;
      this.type = type;
      this.banners = [];
      this.el = $dom.create('div.placement');
      if (this.type === 'before') {
        this.placeBefore();
      } else {
        this.placeAfter();
      }
      this.el.addEventListener('dragenter', this.dragEnter.bind(this), false);
      this.el.addEventListener('drop', this.drop.bind(this), false);
      bannerPlacements.push(this);
    }

    BannerPlacement.prototype.placeAfter = function() {
      var next, parent;
      parent = this.docElement.parentNode;
      next = this.docElement.nextSibling;
      if (next) {
        return parent.insertBefore(this.el, next);
      } else {
        return parent.appendChild(this.el);
      }
    };

    BannerPlacement.prototype.placeBefore = function() {
      var parent;
      parent = this.docElement.parentNode;
      return parent.insertBefore(this.el, this.docElement);
    };

    BannerPlacement.prototype.dragEnter = function(event) {
      return this.el.appendChild(draggingElement.image());
    };

    BannerPlacement.prototype.drop = function(event) {
      var placement, _i, _len, _results;
      console.log(1);
      this.addBanner(draggingElement);
      _results = [];
      for (_i = 0, _len = bannerPlacements.length; _i < _len; _i++) {
        placement = bannerPlacements[_i];
        if (placement !== this) {
          _results.push(placement.removeBanner(draggingElement));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    BannerPlacement.prototype.addBanner = function(banner) {
      this.removeBanner(banner);
      return this.banners.push(banner);
    };

    BannerPlacement.prototype.removeBanner = function(banner) {
      return this.banners = this.banners["delete"](banner);
    };

    return BannerPlacement;

  })();

  this.constructorPanel = new ConstructorPanel();

  this.draggingElement = void 0;

  this.placements = [];

  checkForInterest = function(el) {
    return el && el.nodeName !== '#text' && el.id !== 'constructor-panel' && el.id !== 'constructor-panel-background' && el.classList[0] !== 'banner';
  };

  childArray = function(node) {
    var array, _i, _len, _ref;
    array = [];
    _ref = node.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      array.push(node);
    }
    return array;
  };

  generatePlacements = function(parent) {
    var childNodes, lastNode, node, _i, _len;
    childNodes = childArray(parent);
    lastNode = void 0;
    for (_i = 0, _len = childNodes.length; _i < _len; _i++) {
      node = childNodes[_i];
      if (checkForInterest(node)) {
        generatePlacements(node);
        new BannerPlacement(node, 'before');
        lastNode = node;
      }
    }
    if (lastNode) {
      return new BannerPlacement(lastNode, 'after');
    }
  };

  $dom.onready((function(_this) {
    return function() {
      _this.constructorPanel.attachTo(document.body);
      return generatePlacements(document.body);
    };
  })(this));

  this.firstBanner = function() {
    return new Banner('https://s3-ap-southeast-1.amazonaws.com/asia-user-profile/pictures/1045/original.gif?1419598643');
  };

  this.secondBanner = function() {
    return new Banner('http://static.aforextrading.com/pictures/1036/original.gif');
  };

  this.constructorPanel.addBanner(this.firstBanner());

  this.constructorPanel.addBanner(this.secondBanner());

}).call(this);
