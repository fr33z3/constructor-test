// Generated by CoffeeScript 1.8.0
(function() {
  var BANNER_IMG_STYLE, ConstructorPanel, PANEL_BACKGROUND_STYLE, PANEL_STYLE, dragEnter, dragOver, draggedElement, insertElement;

  PANEL_BACKGROUND_STYLE = {
    left: 0,
    top: 0,
    position: 'absolute',
    width: '100%',
    height: '100%',
    opacity: 0.7,
    transition: 'left 0.8s',
    "background-color": "black"
  };

  PANEL_STYLE = {
    left: 0,
    top: 0,
    position: 'absolute',
    transition: 'left 0.8s',
    width: '100%',
    heigth: '100%'
  };

  BANNER_IMG_STYLE = {
    margin: '10px'
  };

  ConstructorPanel = (function() {
    function ConstructorPanel() {
      this.banners = [];
      this.background = $dom.create("div#constructor-panel-background");
      this.panel = $dom.create("div#constructor-panel");
      $dom.style(this.background, PANEL_BACKGROUND_STYLE);
      $dom.style(this.panel, PANEL_STYLE);
    }

    ConstructorPanel.prototype.addBanner = function(banner) {
      this.banners.push(banner);
      return this.panel.appendChild(banner.previewImage);
    };

    ConstructorPanel.prototype.removeBanner = function(banner) {
      return this.banners.push(banner);
    };

    ConstructorPanel.prototype.width = function() {
      return this.background.clientWidth;
    };

    ConstructorPanel.prototype.show = function() {
      $dom.style(this.background, {
        left: "0px"
      });
      return $dom.style(this.panel, {
        left: "0px"
      });
    };

    ConstructorPanel.prototype.hide = function() {
      $dom.style(this.background, {
        left: "" + (-this.width()) + "px"
      });
      return $dom.style(this.panel, {
        left: "" + (-this.width()) + "px"
      });
    };

    ConstructorPanel.prototype.attachTo = function(element) {
      element.appendChild(this.background);
      return element.appendChild(this.panel);
    };

    return ConstructorPanel;

  })();

  draggedElement = void 0;

  this.Banner = (function() {
    function Banner(uri) {
      this.uri = uri;
      this.previewImage = $dom.create('img.banner');
      $dom.style(this.previewImage, BANNER_IMG_STYLE);
      this.previewImage.onload = this.normalizePreview.bind(this);
      this.previewImage.src = this.uri;
      this.previewImage.draggable = true;
      this.previewImage.addEventListener('dragstart', this.previewElementDragStart.bind(this), false);
      this._image = $dom.create('img.banner');
      this._image.src = this.uri;
    }

    Banner.prototype.previewWidth = function() {
      return this.previewImage.naturalWidth;
    };

    Banner.prototype.previewHeight = function() {
      return this.previewImage.naturalHeight;
    };

    Banner.prototype.normalizePreview = function() {
      if (this.previewWidth() > 400) {
        return this.previewImage.width = 400;
      } else if (this.previewHeight() > 100) {
        return this.previewImage.height = 100;
      }
    };

    Banner.prototype.previewElementDragStart = function(event) {
      draggedElement = this;
      return setTimeout(function() {
        return constructorPanel.hide();
      }, 1);
    };

    Banner.prototype.image = function() {
      return this._image;
    };

    return Banner;

  })();

  insertElement = function(target, insertingElement) {
    if (target !== insertingElement) {
      if (target.tagName === 'BODY') {
        console.log("appendChild:");
        console.log(target);
        return target.appendChild(insertingElement);
      } else if (target && target.parentNode) {
        console.log("insertBefore:");
        console.log(target);
        return target.parentNode.insertBefore(insertingElement, target);
      }
    }
  };

  dragEnter = function(event) {
    var target;
    target = event.target;
    if (target && target !== draggedElement.image()) {
      return insertElement(target, draggedElement.image());
    }
  };

  dragOver = function(event) {
    event.preventDefault();
    return false;
  };

  document.addEventListener('dragenter', dragEnter, false);

  document.addEventListener('dragover', dragOver, false);

  this.constructorPanel = new ConstructorPanel();

  $dom.onready((function(_this) {
    return function() {
      return _this.constructorPanel.attachTo(document.body);
    };
  })(this));

  this.firstBanner = function() {
    return new Banner('https://s3-ap-southeast-1.amazonaws.com/asia-user-profile/pictures/1045/original.gif?1419598643');
  };

  this.secondBanner = function() {
    return new Banner('http://static.aforextrading.com/pictures/1036/original.gif');
  };

  this.constructorPanel.addBanner(this.firstBanner());

  this.constructorPanel.addBanner(this.secondBanner());

}).call(this);
